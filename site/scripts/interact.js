ChatGPT —Å–∫–∞–∑–∞–ª:
–î–∞, —Ç—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª! üí°
–î–∞–≤–∞–π —è –æ–±—ä—è—Å–Ω—é —Ç–µ–±–µ —Ç–æ—á–Ω–æ, —á—ë—Ç–∫–æ –∏ –ø–æ—à–∞–≥–æ–≤–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:

üìã –°–µ–π—á–∞—Å —Ç–≤–æ–π —Å–∫—Ä–∏–ø—Ç (modix.js) –¥–µ–ª–∞–µ—Ç:
–ß—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç	–ì–¥–µ
–ü–æ—Å–µ—â–µ–Ω–∏—è	‚úÖ –ó–¥–µ—Å—å (registerVisit(fileId))
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏	‚úÖ –ó–¥–µ—Å—å (renderComments(fileId))
–õ–∞–π–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è	‚úÖ –ó–¥–µ—Å—å (updateStats(fileId))
–õ–∞–π–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É	‚úÖ –ó–¥–µ—Å—å (likeFile(fileId))
–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞	‚úÖ –ó–¥–µ—Å—å (downloadFile(fileId))
‚û°Ô∏è –ù–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –°–¢–†–ê–ù–ò–¶–´ –ü–ï–†–ï–í–û–î–ê (–Ω–∞–ø—Ä–∏–º–µ—Ä, hearts_of_azeroth_hoi4_ru_v1_0.html) ‚Äî –≤—Å—ë –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.

‚ùó –ü—Ä–æ–±–ª–µ–º–∞:
–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ò–ì–†–´ (–Ω–∞–ø—Ä–∏–º–µ—Ä,
https://mstrdoctor.github.io/Modix/hearts_of_iron_iv___hoi_4.html)
—É —Ç–µ–±—è –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
(–Ω–æ –æ–Ω–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ stats.json –∏ comments.json).

üëâ –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ò–ì–†–´ –Ω—É–∂–Ω–æ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π:

–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ–∂–∏–µ —Å—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ fetch

–ò –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö –ø—Ä—è–º–æ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö.

üõ†Ô∏è –ö—É–¥–∞ –∏ —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:
–ì–¥–µ	–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (hearts_of_azeroth_hoi4_ru_v1_0.html)	–û—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–≤–æ–π —Å–∫—Ä–∏–ø—Ç (–æ–Ω —É–∂–µ —Ä–∞–±–æ—á–∏–π ‚úÖ)
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä—ã (hearts_of_iron_iv___hoi_4.html)	–ù–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –ª–∞–π–∫–∏ / —Å–∫–∞—á–∏–≤–∞–Ω–∏—è / –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
üöÄ –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –ì–û–¢–û–í–´–ô —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ò–ì–†–´:
html
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
<script>
const API_URL = "https://modix-server.fly.dev";

document.addEventListener("DOMContentLoaded", function() {
    // –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ –∫–ª–∞—Å—Å—É .translation-card
    const cards = document.querySelectorAll(".translation-card");

    cards.forEach(card => {
        const fileId = card.dataset.fileid;  // –ß–∏—Ç–∞–µ–º file_id –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-fileid

        if (!fileId) return;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∞–π–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
        fetch(`${API_URL}/stats/${fileId}`)
            .then(res => res.json())
            .then(data => {
                card.querySelector(".download-count").innerText = `${data.downloads || 0} –∑–∞–≥—Ä—É–∑–æ–∫`;
                card.querySelector(".like-count").innerText = `‚ù§Ô∏è ${data.likes || 0} –ª–∞–π–∫–æ–≤`;
            })
            .catch(err => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", err));

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        fetch(`${API_URL}/comments/${fileId}`)
            .then(res => res.json())
            .then(comments => {
                card.querySelector(".comment-count").innerText = `${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`;
            })
            .catch(err => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", err));
    });
});
</script>


// === –ü–æ–ª—É—á–µ–Ω–∏–µ fileId –∏–∑ URL
function getFileIdFromURL() {
    const url = window.location.pathname;
    const fileId = url.substring(url.lastIndexOf('/') + 1, url.lastIndexOf('.html'));
    return (fileId || '').toLowerCase();
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏
function initializeNameField(fileId) {
    const nameField = document.getElementById("name-" + fileId);
    if (!nameField) return;
    const savedName = loadNameFromLocalStorage();
    nameField.value = savedName;
    toggleSubmitButton(fileId);
}

function loadNameFromLocalStorage() {
    try {
        return localStorage.getItem("username") || '';
    } catch {
        return '';
    }
}

function saveNameToLocalStorage(name) {
    try {
        localStorage.setItem("username", name);
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ localStorage:", e);
    }
}

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
function setupNameFieldListeners(fileId) {
    const nameField = document.getElementById("name-" + fileId);
    const textField = document.getElementById("text-" + fileId);

    if (nameField) {
        nameField.addEventListener("input", () => {
            saveNameToLocalStorage(nameField.value);
            toggleSubmitButton(fileId);
        });
    }
    if (textField) {
        textField.addEventListener("input", () => {
            toggleSubmitButton(fileId);
        });
    }
}

// === –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
function toggleSubmitButton(fileId) {
    const name = document.getElementById("name-" + fileId)?.value.trim();
    const text = document.getElementById("text-" + fileId)?.value.trim();
    const submitButton = document.getElementById("submit-button-" + fileId);
    if (submitButton) {
        submitButton.disabled = !(name && text);
    }
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function addComment(fileId, nameFieldId, textFieldId) {
    const name = document.getElementById(nameFieldId)?.value.trim();
    const text = document.getElementById(textFieldId)?.value.trim();
    if (!name || !text) return alert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π");

    fetch(`${API_URL}/comments/${fileId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, text })
    })
    .then(response => response.json())
    .then(() => {
        alert("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ‚úÖ");
        renderComments(fileId);
        document.getElementById(textFieldId).value = "";
        toggleSubmitButton(fileId);
    })
    .catch(err => alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: " + err));
}

// === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function renderComments(fileId) {
    const container = document.getElementById("comments-" + fileId);
    if (!container) return;

    fetch(`${API_URL}/comments/${fileId}`)
        .then(res => res.json())
        .then(data => {
            const list = data || [];
            container.innerHTML = "";
            list.forEach(c => {
                const el = document.createElement("div");
                el.style = "border:1px solid #ccc;padding:8px;margin:5px 0;background:#f9f9f9;color:#000;border-radius:6px;";
                el.innerHTML = `<strong>${c.name}</strong><br><span>${c.text}</span>`;
                container.appendChild(el);
            });
            updateCommentCount(fileId, list.length);
        })
        .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", err));
}

function updateCommentCount(fileId, count) {
    const el = document.getElementById("comment-count-" + fileId);
    if (el) el.innerText = `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${count}`;
}

// === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ª–∞–π–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
function updateStats(fileId) {
    fetch(`${API_URL}/stats/${fileId}`)
        .then(res => res.json())
        .then(data => {
            updateDownloadCount(fileId, data.downloads || 0);
            updateLikeCount(fileId, data.likes || 0);
        })
        .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", err));
}

function updateDownloadCount(fileId, count) {
    const el = document.getElementById("download-count-" + fileId);
    if (el) el.innerText = `(${count} –∑–∞–≥—Ä—É–∑–æ–∫)`;
}

function updateLikeCount(fileId, count) {
    const el = document.getElementById("like-count-" + fileId);
    if (el) el.innerText = `‚ù§Ô∏è ${count} –ª–∞–π–∫–æ–≤`;
}

// === –õ–∞–π–∫ (—Ä–µ–∞–ª—å–Ω—ã–π)
function likeFile(fileId) {
    if (localStorage.getItem("liked_" + fileId)) {
        alert("–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —Ä–∞–Ω–µ–µ ‚úÖ");
        return;
    }

    fetch(`${API_URL}/like/${fileId}`, { method: "POST" })
        .then(res => res.json())
        .then(data => {
            alert("–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫! ‚ù§Ô∏è");
            updateLikeCount(fileId, data.likes);
            localStorage.setItem("liked_" + fileId, "true");
        })
        .catch(err => alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ: " + err));
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
function downloadFile(fileId, fileUrl) {
    window.open(fileUrl, '_blank');

    fetch(`${API_URL}/files/${fileId}`, { method: 'GET' })
        .then(() => {
            setTimeout(() => {
                updateStats(fileId);
            }, 500);
        })
        .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∑–æ–∫: " + err));
}
