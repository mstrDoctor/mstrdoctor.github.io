// === –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
window.addEventListener("load", () => {
    const fileId = getFileIdFromURL();
    console.log("File ID –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", fileId);
    initializeNameField(fileId);
    setupNameFieldListeners(fileId);
    toggleSubmitButton(fileId);
    renderComments(fileId);
    updateStats(fileId);
});

// === –ü–æ–ª—É—á–µ–Ω–∏–µ fileId –∏–∑ URL ===
function getFileIdFromURL() {
    const url = window.location.pathname;
    const fileId = url.substring(url.lastIndexOf('/') + 1, url.lastIndexOf('.html'));
    return (fileId || '').toLowerCase();
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ ===
function initializeNameField(fileId) {
    const nameField = document.getElementById("name-" + fileId);
    if (!nameField) return;
    const savedName = loadNameFromLocalStorage();
    nameField.value = savedName;
    toggleSubmitButton(fileId);
}

function loadNameFromLocalStorage() {
    try {
        return localStorage.getItem("username") || '';
    } catch {
        return '';
    }
}

function saveNameToLocalStorage(name) {
    try {
        localStorage.setItem("username", name);
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ localStorage:", e);
    }
}

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
function setupNameFieldListeners(fileId) {
    const nameField = document.getElementById("name-" + fileId);
    const textField = document.getElementById("text-" + fileId);

    if (nameField) {
        nameField.addEventListener("input", () => {
            saveNameToLocalStorage(nameField.value);
            toggleSubmitButton(fileId);
        });
    }
    if (textField) {
        textField.addEventListener("input", () => {
            toggleSubmitButton(fileId);
        });
    }
}

// === –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
function toggleSubmitButton(fileId) {
    const name = document.getElementById("name-" + fileId)?.value.trim();
    const text = document.getElementById("text-" + fileId)?.value.trim();
    const submitButton = document.getElementById("submit-button-" + fileId);
    if (submitButton) {
        submitButton.disabled = !(name && text);
    }
}

// === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function renderComments(fileId) {
    const container = document.getElementById("comments-" + fileId);
    if (!container) return;

    fetch("data/comments.json")
        .then(res => res.json())
        .then(data => {
            const comments = data[fileId] || [];
            container.innerHTML = "";
            comments.forEach(c => {
                const el = document.createElement("div");
                el.style = "border:1px solid #ccc;padding:8px;margin:5px 0;background:#f9f9f9;color:#000;border-radius:6px;";
                el.innerHTML = `<strong>${c.name}</strong><br><span>${c.text}</span>`;
                container.appendChild(el);
            });
            updateCommentCount(fileId, comments.length);
        })
        .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", err));
}

function updateCommentCount(fileId, count) {
    const el = document.getElementById("comment-count-" + fileId);
    if (el) el.innerText = `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${count}`;
}

// === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ª–∞–π–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
function updateStats(fileId) {
    fetch("data/stats.json")
        .then(res => res.json())
        .then(data => {
            const stats = data[fileId] || { downloads: 0, likes: 0 };
            updateDownloadCount(fileId, stats.downloads);
            updateLikeCount(fileId, stats.likes);
        })
        .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", err));
}

function updateDownloadCount(fileId, count) {
    const el = document.getElementById("download-count-" + fileId);
    if (el) el.innerText = `(${count} –∑–∞–≥—Ä—É–∑–æ–∫)`;
}

function updateLikeCount(fileId, count) {
    const el = document.getElementById("like-count-" + fileId);
    if (el) el.innerText = `‚ù§Ô∏è ${count} –ª–∞–π–∫–æ–≤`;
}

// === –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–∞–π–∫–æ–≤
function likeFile(fileId) {
    alert("–ù–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ–º —Å–∞–π—Ç–µ –ª–∞–π–∫–Ω—É—Ç—å –Ω–µ–ª—å–∑—è. –ü–æ–ø—Ä–æ–±—É–π –ª–æ–∫–∞–ª—å–Ω–æ üòÖ");
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞)
function downloadFile(fileId, fileUrl) {
    window.open(fileUrl, '_blank');
    // –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
}
