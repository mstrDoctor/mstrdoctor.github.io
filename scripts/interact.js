// === –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
window.addEventListener("load", () => {
    const fileId = getFileIdFromURL();
    console.log("File ID –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", fileId);
    initializeNameField(fileId);
    setupNameFieldListeners(fileId);
    toggleSubmitButton(fileId);
    renderComments(fileId);
    updateDownloadCount(fileId);
    updateLikeState(fileId);
});

function getFileIdFromURL() {
    const url = window.location.pathname;
    const fileId = url.substring(url.lastIndexOf('/') + 1, url.lastIndexOf('.html'));
    return (fileId || '').toLowerCase();  // <<< –¥–æ–±–∞–≤–ª—è–µ–º .toLowerCase()
}


// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è –∏–º–µ–Ω–∏ ===
function initializeNameField(fileId) {
    const nameField = document.getElementById("name-" + fileId);
    if (!nameField) return;
    const savedName = loadNameFromLocalStorage();
    nameField.value = savedName;
    toggleSubmitButton(fileId);
}

// === –ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞ ===
function setupNameFieldListeners(fileId) {
    const nameField = document.getElementById("name-" + fileId);
    const textField = document.getElementById("text-" + fileId);

    if (nameField) {
        nameField.addEventListener("input", () => {
            saveNameToLocalStorage(nameField.value);
            toggleSubmitButton(fileId);
        });
    }
    if (textField) {
        textField.addEventListener("input", () => {
            toggleSubmitButton(fileId);
        });
    }
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ ===
function toggleSubmitButton(fileId) {
    const name = document.getElementById("name-" + fileId)?.value.trim();
    const text = document.getElementById("text-" + fileId)?.value.trim();
    const submitButton = document.getElementById("submit-button-" + fileId);

    if (submitButton) {
        submitButton.disabled = !(name && text);
    }
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ localStorage ===
function saveNameToLocalStorage(name) {
    try {
        localStorage.setItem("username", name);
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ localStorage:", e);
    }
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ –∏–º–µ–Ω–∏ –∏–∑ localStorage ===
function loadNameFromLocalStorage() {
    try {
        return localStorage.getItem("username") || '';
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ localStorage:", e);
        return '';
    }
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ===
function addComment(fileId, nameFieldId, textFieldId) {
    const name = document.getElementById(nameFieldId)?.value.trim();
    const text = document.getElementById(textFieldId)?.value.trim();
    if (!name || !text) return alert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π");

    fetch(`/comments/${fileId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, text })
    })
    .then(response => response.json())
    .then(() => {
        alert("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ‚úÖ");
        renderComments(fileId);
        document.getElementById(textFieldId).value = "";
        toggleSubmitButton(fileId);
    })
    .catch(err => alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: " + err));
}

// === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ===
function renderComments(fileId) {
    const container = document.getElementById("comments-" + fileId);
    if (!container) return;

    fetch(`/comments/${fileId}`, { method: 'GET' })
    .then(res => res.json())
    .then(data => {
        const list = data || [];
        container.innerHTML = "";
        list.forEach(c => {
            const el = document.createElement("div");
            el.style = "border:1px solid #ccc;padding:8px;margin:5px 0;background:#f9f9f9;color:#000;border-radius:6px;";

            let dateText = '';
            if (c.timestamp) {
                const date = new Date(c.timestamp);
                dateText = `<br><small style="color: #666;">üïí ${date.toLocaleString()}</small>`;
            }

            el.innerHTML = `<strong>${c.name}</strong><br><span>${c.text}</span>${dateText}`;
            container.appendChild(el);
        });

        updateCommentCount(fileId, list.length);
    })
    .catch(err => alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: " + err));
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ===
function updateCommentCount(fileId, count) {
    const commentCountElement = document.getElementById("comment-count-" + fileId);
    if (commentCountElement) {
        commentCountElement.innerText = `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${count}`;
    }
}

// === –õ–∞–π–∫ (—Å –∑–∞–ø—Ä–µ—Ç–æ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π) ===
function likeFile(fileId) {
    if (localStorage.getItem("liked_" + fileId)) {
        alert("–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —Ä–∞–Ω–µ–µ ‚úÖ");
        return;
    }

    fetch(`/like/${fileId}`, { method: "POST" })
    .then(res => res.json())
    .then(data => {
        alert("–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫! ‚ù§Ô∏è");
        updateLikeCount(fileId, data.likes);
        localStorage.setItem("liked_" + fileId, "true");
    })
    .catch(err => alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ: " + err));
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –ª–∞–π–∫–æ–≤ ===
function updateLikeCount(fileId, likes) {
    const likeCountElement = document.getElementById("like-count-" + fileId);
    if (likeCountElement) {
        likeCountElement.innerText = `‚ù§Ô∏è ${likes} –ª–∞–π–∫–æ–≤`;
    }
}

// === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞–π–∫–∞ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ ===
function updateLikeState(fileId) {
    if (localStorage.getItem("liked_" + fileId)) {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∞–π–∫–Ω—É–ª: ${fileId}`);
    }

    // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    fetch(`/stats/${fileId}`)
    .then(res => res.json())
    .then(data => {
        updateLikeCount(fileId, data.likes);
        updateDownloadCount(fileId, data.downloads);
    })
    .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + err));
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∑–æ–∫ ===
function updateDownloadCount(fileId, downloads = null) {
    const downloadCountElement = document.getElementById("download-count-" + fileId);
    if (downloadCountElement) {
        if (downloads !== null) {
            downloadCountElement.innerText = `(${downloads} –∑–∞–≥—Ä—É–∑–æ–∫)`;
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ API
            fetch(`/stats/${fileId}`)
            .then(res => res.json())
            .then(data => {
                downloadCountElement.innerText = `(${data.downloads} –∑–∞–≥—Ä—É–∑–æ–∫)`;
            })
            .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∑–æ–∫: " + err));
        }
    }
}

function downloadFile(fileId, fileUrl) {
    // 1. –û—Ç–∫—Ä—ã—Ç—å MEGA –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
    window.open(fileUrl, '_blank');

    // 2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫
    fetch(`/files/${fileId}`, { method: 'GET' })
    .then(() => {
        // 3. –ü–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —á–∏—Å–ª–æ –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        setTimeout(() => {
            fetch(`/stats/${fileId}`)
            .then(res => res.json())
            .then(data => {
                document.getElementById("download-count-" + fileId).innerText = `(${data.downloads} –∑–∞–≥—Ä—É–∑–æ–∫)`;
            });
        }, 500);
    })
    .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∑–æ–∫: " + err));
}


